Sure, here are the core classes, functions, and methods that will be necessary for our Snake game:

1. Model
- Snake: represents the snake in the game, with methods to move, grow, and check for collisions
- Food: represents the food in the game, with methods to randomly place the food on the board
- Board: represents the game board, with methods to update the board with the snake and food positions, and check for collisions

2. View
- GameView: represents the game view, with methods to display the game board and update the score

3. Controller
- GameController: represents the game controller, with methods to handle user input and update the game state

4. Main
- main: the entry point of the game, initializes the model, view, and controller, and starts the game loop

Here is the content of each file:

model.py
```python
from typing import List, Tuple
import random

class Snake:
    def __init__(self, start_pos: Tuple[int, int], length: int):
        self.positions = [start_pos]
        self.length = length
        self.direction = "RIGHT"

    def move(self):
        head_pos = self.positions[0]
        if self.direction == "RIGHT":
            new_pos = (head_pos[0]+1, head_pos[1])
        elif self.direction == "LEFT":
            new_pos = (head_pos[0]-1, head_pos[1])
        elif self.direction == "UP":
            new_pos = (head_pos[0], head_pos[1]-1)
        elif self.direction == "DOWN":
            new_pos = (head_pos[0], head_pos[1]+1)
        self.positions.insert(0, new_pos)
        if len(self.positions) > self.length:
            self.positions.pop()

    def grow(self):
        self.length += 1

    def check_collision(self, board_size: Tuple[int, int]) -> bool:
        head_pos = self.positions[0]
        if head_pos[0] < 0 or head_pos[0] >= board_size[0] or head_pos[1] < 0 or head_pos[1] >= board_size[1]:
            return True
        for pos in self.positions[1:]:
            if pos == head_pos:
                return True
        return False

class Food:
    def __init__(self, board_size: Tuple[int, int]):
        self.position = (0, 0)
        self.board_size = board_size

    def place_food(self, snake_positions: List[Tuple[int, int]]):
        while True:
            x = random.randint(0, self.board_size[0]-1)
            y = random.randint(0, self.board_size[1]-1)
            if (x, y) not in snake_positions:
                self.position = (x, y)
                break

class Board:
    def __init__(self, size: Tuple[int, int]):
        self.size = size
        self.snake = Snake((size[0]//2, size[1]//2), 3)
        self.food = Food(size)
        self.food.place_food(self.snake.positions)

    def update_board(self) -> Tuple[List[Tuple[int, int]], Tuple[int, int]]:
        self.snake.move()
        if self.snake.positions[0] == self.food.position:
            self.snake.grow()
            self.food.place_food(self.snake.positions)
        if self.snake.check_collision(self.size):
            return [], (-1, -1)
        return self.snake.positions, self.food.position
```

view.py
```python
from typing import List, Tuple
import pygame

class GameView:
    def __init__(self, board_size: Tuple[int, int], block_size: int):
        self.board_size = board_size
        self.block_size = block_size
        self.screen_size = (board_size[0]*block_size, board_size[1]*block_size)
        self.screen = pygame.display.set_mode(self.screen_size)
        pygame.display.set_caption("Snake Game")
        self.font = pygame.font.SysFont("Arial", 20)

    def draw_board(self, snake_positions: List[Tuple[int, int]], food_position: Tuple[int, int], score: int):
        self.screen.fill((255, 255, 255))
        for pos in snake_positions:
            pygame.draw.rect(self.screen, (0, 255, 0), (pos[0]*self.block_size, pos[1]*self.block_size, self.block_size, self.block_size))
        pygame.draw.rect(self.screen, (255, 0, 0), (food_position[0]*self.block_size, food_position[1]*self.block_size, self.block_size, self.block_size))
        score_text = self.font.render("Score: " + str(score), True, (0, 0, 0))
        self.screen.blit(score_text, (10, 10))
        pygame.display.update()
```

controller.py
```python
import pygame
from pygame.locals import *
from typing import Tuple

class GameController:
    def __init__(self):
        self.direction = "RIGHT"

    def handle_events(self) -> bool:
        for event in pygame.event.get():
            if event.type == QUIT:
                return False
            elif event.type == KEYDOWN:
                if event.key == K_RIGHT and self.direction != "LEFT":
                    self.direction = "RIGHT"
                elif event.key == K_LEFT and self.direction != "RIGHT":
                    self.direction = "LEFT"
                elif event.key == K_UP and self.direction != "DOWN":
                    self.direction = "UP"
                elif event.key == K_DOWN and self.direction != "UP":
                    self.direction = "DOWN"
        return True
```

main.py
```python
import pygame
from typing import Tuple
from model import Board
from view import GameView
from controller import GameController

def main(board_size: Tuple[int, int], block_size: int):
    pygame.init()
    board = Board(board_size)
    view = GameView(board_size, block_size)
    controller = GameController()
    score = 0

    while True:
        if not controller.handle_events():
            break
        snake_positions, food_position = board.update_board()
        if snake_positions == []:
            break
        if food_position == (-1, -1):
            break
        view.draw_board(snake_positions, food_position, score)
        score += 1

    pygame.quit()

if __name__ == "__main__":
    main((20, 20), 20)
```